Install CORS


------
STEP 1
------


//	Use this command to ignore platform requirements to then install the next plugin that will increase the memory usage if memory has been exceeded and if not skip this step and move on to step 2
//
$ composer install --ignore-platform-reqs

$ 
------
STEP 2
------

//	The package for CORS which is not the one used before is found at this url
//
https://github.com/fruitcake/laravel-cors



------
STEP 3
------


//	If you get a conflict, this could be because an older version of barryvdh/laravel-cors or fruitcake/laravel-cors is installed. Remove the conflicting package first, then try install again 
//
$ composer remove barryvdh/laravel-cors fruitcake/laravel-cors



------
STEP 4
------


//	Next install CORS with this command
//
$ composer require fruitcake/laravel-cors



------
STEP 5
------


To allow CORS for all your routes, add the HandleCors middleware at the top of the $middleware property of app/Http/Kernel.php class


	
	protected $middleware = [
	  \Fruitcake\Cors\HandleCors::class,
		// ...
	];



------
STEP 6
------


Now update the config to define the paths you want to run the CORS service on at location   config/cors.php   adding the   'paths' => ['api/*'],   as shown below



	<?php

	return [

		/*
		|--------------------------------------------------------------------------
		| Cross-Origin Resource Sharing (CORS) Configuration
		|--------------------------------------------------------------------------
		|
		| Here you may configure your settings for cross-origin resource sharing
		| or "CORS". This determines what cross-origin operations may execute
		| in web browsers. You are free to adjust these settings as needed.
		|
		| To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
		|
		*/

		'paths' => ['api/*'],

		'allowed_methods' => ['*'],

		'allowed_origins' => ['*'],

		'allowed_origins_patterns' => [],

		'allowed_headers' => ['*'],

		'exposed_headers' => [],

		'max_age' => 0,

		'supports_credentials' => false,

	];
	
	
	
------
STEP 7
------
	
	
Normally when you submit a form through the Laravel application the form includes a CSRF token.

When using POSTMAN to work on simply a backend application we are not using forms hence not sending CSRF tokens with requests.

This results in an error.

To illiminate this error we must inform Laravel which routes do not need CSRF token protection.

To do this go to the directory location in the Laravel application :


	app/middleware/VerifyCsrfToken.php


	Within this file find the code :



	class VerifyCsrfToken extends Middleware
	{
		/**
		 * The URIs that should be excluded from CSRF verification.
		 *
		 * @var array
		 */
		protected $except = [

		];
	}



	Change it to :



	class VerifyCsrfToken extends Middleware
	{
		/**
		 * The URIs that should be excluded from CSRF verification.
		 *
		 * @var array
		 */
		protected $except = [
			
			'api/*'
		];
	}



Now any route that starts with     api     will be allowed to be used without causing an error
	
	
------
STEP 8
------


Configuration

The defaults are set in config/cors.php. Publish the config to copy the file to your own config


//	Use this command for configuration
//
php artisan vendor:publish --tag="cors"



------
STEP 9
------


//	Clear config using this command
//
$ php artisan config:clear



------
STEP 10
------


//	Clear route using this command
//
$ php artisan route:clear


-------
STEP 11
-------


//	Clear cache using this command
//
$ php artisan cache:clear





Because of http method overriding in Laravel, allowing POST methods will also enable the API users to perform PUT and DELETE requests as well


